// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id        String          @id @default(cuid())
    createdAt DateTime        @default(now())
    name      String?
    email     String          @unique
    admin     Boolean         @default(false)
    spreads   Spread[]
    uploads   Media[]
    refs      CardReference[]
    sessions  Session[]
    googleId  String?         @unique
}

model Session {
    id        String   @id @default(cuid())
    userId    String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Spread {
    id        Int        @id @default(autoincrement())
    createdAt DateTime   @default(now())
    userId    String
    user      User       @relation(fields: [userId], references: [id])
    name      String
    date      DateTime   @default(now())
    notes     String?    @db.Text
    template  Boolean    @default(false)
    positions Position[]
    media     Media[]

    @@index([userId, template])
}

model Position {
    id       Int     @id @default(autoincrement())
    spreadId Int
    spread   Spread  @relation(fields: [spreadId], references: [id], onDelete: Cascade)
    order    Int?
    name     String
    card     String?
    reversed Boolean @default(false)
    suit     String?
    notes    String? @db.Text
}

model Media {
    createdAt DateTime @default(now())
    path      String   @id
    type      String
    width     Int?
    height    Int?
    spreadId  Int?
    spead     Spread?  @relation(fields: [spreadId], references: [id], onDelete: SetNull)
    deleted   Boolean  @default(false)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    blurImage Bytes?

    @@index([spreadId, deleted])
}

model CardReference {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    card      String
    text      String   @db.Text
    source    String?
    keywords  String?
    reversed  Boolean  @default(false)
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    starred   Boolean  @default(false)

    @@index([userId, card])
    @@index([userId, source])
}

// TODO: Add deck models to support differently named cards
